// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	big "math/big"
	reflect "reflect"

	models "github.com/AndreyBrytkov/getblock.io-tz/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRest is a mock of Rest interface.
type MockRest struct {
	ctrl     *gomock.Controller
	recorder *MockRestMockRecorder
}

// MockRestMockRecorder is the mock recorder for MockRest.
type MockRestMockRecorder struct {
	mock *MockRest
}

// NewMockRest creates a new mock instance.
func NewMockRest(ctrl *gomock.Controller) *MockRest {
	mock := &MockRest{ctrl: ctrl}
	mock.recorder = &MockRestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRest) EXPECT() *MockRestMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRest) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockRestMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRest)(nil).Run))
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetMaxBalanceDeltaWallet mocks base method.
func (m *MockUsecase) GetMaxBalanceDeltaWallet() (string, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBalanceDeltaWallet")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMaxBalanceDeltaWallet indicates an expected call of GetMaxBalanceDeltaWallet.
func (mr *MockUsecaseMockRecorder) GetMaxBalanceDeltaWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBalanceDeltaWallet", reflect.TypeOf((*MockUsecase)(nil).GetMaxBalanceDeltaWallet))
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetTransactionsByBlocksRange mocks base method.
func (m *MockStorage) GetTransactionsByBlocksRange(from, to big.Int) ([]models.Trasaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByBlocksRange", from, to)
	ret0, _ := ret[0].([]models.Trasaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByBlocksRange indicates an expected call of GetTransactionsByBlocksRange.
func (mr *MockStorageMockRecorder) GetTransactionsByBlocksRange(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByBlocksRange", reflect.TypeOf((*MockStorage)(nil).GetTransactionsByBlocksRange), from, to)
}

// RecordBlock mocks base method.
func (m *MockStorage) RecordBlock(arg0 models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordBlock indicates an expected call of RecordBlock.
func (mr *MockStorageMockRecorder) RecordBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordBlock", reflect.TypeOf((*MockStorage)(nil).RecordBlock), arg0)
}

// RecordTx mocks base method.
func (m *MockStorage) RecordTx(arg0 models.Trasaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTx indicates an expected call of RecordTx.
func (mr *MockStorageMockRecorder) RecordTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTx", reflect.TypeOf((*MockStorage)(nil).RecordTx), arg0)
}

// MockGetBlockApi is a mock of GetBlockApi interface.
type MockGetBlockApi struct {
	ctrl     *gomock.Controller
	recorder *MockGetBlockApiMockRecorder
}

// MockGetBlockApiMockRecorder is the mock recorder for MockGetBlockApi.
type MockGetBlockApiMockRecorder struct {
	mock *MockGetBlockApi
}

// NewMockGetBlockApi creates a new mock instance.
func NewMockGetBlockApi(ctrl *gomock.Controller) *MockGetBlockApi {
	mock := &MockGetBlockApi{ctrl: ctrl}
	mock.recorder = &MockGetBlockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetBlockApi) EXPECT() *MockGetBlockApiMockRecorder {
	return m.recorder
}

// GetBlockByNum mocks base method.
func (m *MockGetBlockApi) GetBlockByNum(n big.Int) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNum", n)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNum indicates an expected call of GetBlockByNum.
func (mr *MockGetBlockApiMockRecorder) GetBlockByNum(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNum", reflect.TypeOf((*MockGetBlockApi)(nil).GetBlockByNum), n)
}

// GetHeadBlockNum mocks base method.
func (m *MockGetBlockApi) GetHeadBlockNum() (big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadBlockNum")
	ret0, _ := ret[0].(big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadBlockNum indicates an expected call of GetHeadBlockNum.
func (mr *MockGetBlockApiMockRecorder) GetHeadBlockNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadBlockNum", reflect.TypeOf((*MockGetBlockApi)(nil).GetHeadBlockNum))
}
